@using CrashDumpAnalyzer.Utilities
@model DumpPageData
@{
    ViewData["Title"] = "Crash Dump Analyzer - Dump";
}

<div class="text-center">
    <h1 class="display-4 title">@ViewData["Title"]</h1>
    <div>
        @if (Model != null)
        {
            var item = Model.Callstack;
            var fixedVersion = new SemanticVersion(item.FixedVersion, item.FixedBuildType);
            var appVersion = new SemanticVersion(item.ApplicationVersion, item.BuildType);
            var isFixed = item.FixedVersion.Length > 0 && appVersion <= fixedVersion;
            var isNotFixed = item.FixedVersion.Length > 0 && appVersion > fixedVersion;

            var stateClass = string.Empty;
            if (isFixed)
                stateClass = "grid-item-done";
            else if (isNotFixed)
                stateClass = "grid-item-notdone";

            if (item.Deleted)
            {
                <div class="alert alert-danger" role="alert">
                    This dump callstack has been deleted.
                </div>
            }
            var stateColor = "transparent";
            var className = string.Empty;
            var issueTitle = string.Empty;
            var issueState = string.Empty;
            var issue = @Model.IssueData;
            var appendedTitle = string.Empty;
            if (issue != null)
            {
                stateColor = issue.StateColor;
                className = "issue-" + issue.StateColor;
                issueTitle = issue.Title;
                issueState = issue.State;
                appendedTitle = " : " + issue.Title;
            }
            <table>
                <tr>
                    <td>@Html.DisplayNameFor(modelItem => item.ApplicationName)</td>
                    <td>@Html.DisplayFor(modelItem => item.ApplicationName)<p Style="float: right;"><button type="button" class="btn btn-primary" onclick="reAnalyzeDump(@item.DumpCallstackId)" title="re-analyze dump file">↻</button><button type="button" class="btn btn-primary" onclick="deleteCallstack(@item.DumpCallstackId)" title="delete callstack">❌</button></p></td>
                </tr>
                <tr>
                    <td class="@stateClass">@Html.DisplayNameFor(modelItem => item.ApplicationVersion)</td>
                    <td class="@stateClass">@Html.DisplayFor(modelItem => item.ApplicationVersion) @BuildTypes.BuildTypeString(item.BuildType)</td>
                </tr>
                <tr>
                    <td>@Html.DisplayNameFor(modelItem => item.Comment)</td>
                    <td style="white-space: pre;"><p class="comment">@Html.DisplayFor(modelItem => item.Comment)</p><button type="button" Style="float: right;" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#setCommentModal" data-id="@item.DumpCallstackId" title="add comment">🗨</button></td>
                </tr>
                <tr>
                    <td>@Html.DisplayNameFor(modelItem => item.Ticket)</td>
                    <td>
                        <a href="@Constants.TicketBaseUrl@item.Ticket" target="_blank" data-bs-toggle="tooltip" title="@issueTitle" class="ticket">@item.Ticket</a>@appendedTitle
                        <div data-bs-toggle="tooltip" title="@issueTitle" class="@className" style="background-color: @stateColor; display: flex; width: fit-content;">@issueState</div>
                        <button type="button" Style="float: right;" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#setTicketModal" data-id="@item.DumpCallstackId">Set</button>
                    </td>
                </tr>
                <tr>
                    <td class="@stateClass">@Html.DisplayNameFor(modelItem => item.FixedVersion)</td>
                    <td class="@stateClass">
                        <p class="version">@Html.DisplayFor(modelItem => item.FixedVersion)</p>
                        <p class="buildType">@BuildTypes.BuildTypeString(item.FixedBuildType)</p>
                        @if (item.ApplicationName != Constants.UnassignedDumpNames)
                        {
                            <button type="button" Style="float: right;" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#setFixedVersionModal" data-id="@item.DumpCallstackId">Set</button>
                        }
                    </td>
                </tr>
                <tr>
                    <td>@Html.DisplayNameFor(modelItem => item.ExceptionType)</td>
                    <td style="white-space: pre-line;">@Html.DisplayFor(modelItem => item.ExceptionType)</td>
                </tr>
                <tr>
                    <td>Dumps</td>
                    <td style="padding:0">
                        <table style="border-style:none;border-width:0">
                            @if (item.DumpInfos.Count > 0 && item.LogFileLines.Count == 0)
                            {
                                @foreach (var dumpInfo in item.DumpInfos)
                                {
                                    <tr style="border-style:none;border-width:0">
                                        @if (dumpInfo.FilePath.Length > 0)
                                        {
                                            <td style="border-style:none;border-width:0" data-toggle="tooltip" title="@dumpInfo.VersionResource"><a href="/Api/DownloadFile/@dumpInfo.DumpFileInfoId">dump @dumpInfo.ApplicationVersion (@SizeFormatter.SizeSuffix(dumpInfo.FileSize))</a><button type="button" class="btn btn-primary" onclick="deleteDump(@item.DumpCallstackId, @dumpInfo.DumpFileInfoId)" title="delete dump file">❌</button></td>
                                        }
                                        else
                                        {
                                            <td style="border-style:none;border-width:0" data-toggle="tooltip" title="@dumpInfo.VersionResource">dump file deleted</td>
                                        }
                                        <td style="border-style:none;border-width:0">@dumpInfo.Comment</td>
                                        <td style="border-style:none;border-width:0">Dump from @dumpInfo.DumpTime (@dumpInfo.DumpTime.AsTimeAgo())</td>
                                        <td style="border-style:none;border-width:0">Uploaded @dumpInfo.UploadDate (@dumpInfo.UploadDate.AsTimeAgo())<br />from ip: @dumpInfo.UploadedFromIp, hotstname: @dumpInfo.UploadedFromHostname</td>
                                        <td style="border-style:none;border-width:0">Hostname: @dumpInfo.ComputerName, domain: @dumpInfo.Domain</td>
                                    </tr>
                                }
                            }
                            @if (item.LogFileLines.Count > 0)
                            {
                                @foreach (var dumpInfo in item.LogFileLines)
                                {
                                    <tr style="border-style:none;border-width:0">
                                        @if (dumpInfo.DumpFileInfo != null && dumpInfo.DumpFileInfo.FilePath.Length > 0)
                                        {
                                            var lnk = @dumpInfo.DumpFileInfo.DumpFileInfoId + "#" + @dumpInfo.LineNumber;
                                            <td style="border-style:none;border-width:0"><a href="/Api/DownloadFile/@lnk" target="_blank">line @dumpInfo.LineNumber (@SizeFormatter.SizeSuffix(dumpInfo.DumpFileInfo.FileSize))</a></td>
                                        }
                                        else
                                        {
                                            <td style="border-style:none;border-width:0">log file deleted</td>
                                        }
                                        @if (dumpInfo.DumpFileInfo != null)
                                        {
                                            <td style="border-style:none;border-width:0">@dumpInfo.DumpFileInfo.Comment</td>
                                        }
                                        else
                                        {
                                            <td style="border-style:none;border-width:0"></td>
                                        }
                                        <td style="border-style:none;border-width:0">Entry from @dumpInfo.Time (@dumpInfo.Time.AsTimeAgo())</td>
                                        @if (dumpInfo.DumpFileInfo != null)
                                        {
                                            <td style="border-style:none;border-width:0">Uploaded @dumpInfo.DumpFileInfo.UploadDate (@dumpInfo.DumpFileInfo.UploadDate.AsTimeAgo())<br />from ip: @dumpInfo.DumpFileInfo.UploadedFromIp, hotstname: @dumpInfo.DumpFileInfo.UploadedFromHostname</td>
                                            <td style="border-style:none;border-width:0">Hostname: @dumpInfo.DumpFileInfo.ComputerName, domain: @dumpInfo.DumpFileInfo.Domain</td>
                                        }
                                    </tr>
                                }
                            }
                        </table>
                    </td>
                </tr>
                <tr>
                    <td>@Html.DisplayNameFor(modelItem => item.Callstack)</td>
                    <td style="white-space: pre-line;">@Html.DisplayFor(modelItem => item.Callstack)</td>
                </tr>
            </table>
        }

    </div>
</div>

<partial name="_CallStackHelpers" />