@using CrashDumpAnalyzer.Utilities
@model IndexPageData
@{
    ViewData["Title"] = "Crash Dump Analyzer";
}

<div class="text-center">
    <div>
        <div style="display: flex; width: 100%;">
            <divstyle style="width: 60%;">
                <h1 class="display-4 title">@ViewData["Title"]</h1>
                <form action="/Api/UploadFiles" method="post" enctype="multipart/form-data" onsubmit="return submitFilesForm(this);">
                    <input type="file" name="files" id="files-field" accept="*.dmp;*.dump" onchange="submitFilesForm(this.form);" multiple />
                    <label for="files-field" id="files-label"
                           ondragover="stopDefault(event);dragOver(this, 'Drop the dump files to upload them.');"
                           ondragenter="stopDefault(event);dragOver(this, 'Drop the dump files to upload them.');"
                           ondragleave="stopDefault(event);dragLeave(this);"
                           ondrop="stopDefault(event);dragLeave(this);addFilesAndSubmit(event);">Click to choose dump files or drag-n-drop them here</label>
                </form>
                <div style="text-align: left;"><div id="files-progress"></div></div>
                <div style="text-align: left; padding-bottom: 10px; padding-top: 5px">
                    <form action="/" method="get" class="nosubmit">
                        <div style="display: flex;">
                            <input type="text" class="nosubmit" name="searchstring" placeholder="Search..." value="@Model.ActiveFilterString" autocomplete='off' />
                        </div>
                    </form>
                </div>
            </divstyle>
            <div style="width: 5%"></div>
            <div style="min-width: 600px; width: 35%; height: 240px; overflow-y: auto;">
                <h4>last @Model.UploadedDumps.Count() uploaded dumps</h4>
                <table class="flowTable">
                    <tr>
                        <th>Uploaded</th>
                        <th>Status</th>
                    </tr>
                    @foreach (var item in Model.UploadedDumps)
                    {
                        <tr>
                            <td>@item.UploadDate (@item.UploadDate.AsTimeAgo()), from @item.UploadedFromIp (@item.UploadedFromHostname)</td>
                            @if (item.CallStack.Length == 0)
                            {
                                <td>still analyzing...</td>
                            }
                            else
                            {
                                <td class="text-center"><a href="/Home/Dump?callstackId=@item.DumpCallstackId">analyzed</a></td>
                            }
                        </tr>
                    }
                </table>
            </div>
        </div>
        <div>
            <table class="flowTable">
                <tr>
                    <th>@Html.DisplayNameFor(model => model.Callstacks.First().ApplicationName)</th>
                    <th>@Html.DisplayNameFor(model => model.Callstacks.First().ApplicationVersion)</th>
                    <th>@Html.DisplayNameFor(model => model.Callstacks.First().Ticket)</th>
                    <th>@Html.DisplayNameFor(model => model.Callstacks.First().FixedVersion)</th>
                    <th>@Html.DisplayNameFor(model => model.Callstacks.First().ExceptionType)</th>
                    <th>Dumps</th>
                    <th>@Html.DisplayNameFor(model => model.Callstacks.First().Callstack)</th>
                    <th></th>
                </tr>
                @foreach (var item in Model.Callstacks)
                {
                    @if (item.DumpInfos.Count == 0 && !item.Deleted)
                        continue; // skip empty dump callstacks
                    {
                        var fixedVersion = new SemanticVersion(item.FixedVersion);
                        var appVersion = new SemanticVersion(item.ApplicationVersion);
                        var isFixed = item.FixedVersion.Length > 0 && appVersion <= fixedVersion;
                        var isNotFixed = item.FixedVersion.Length > 0 && appVersion > fixedVersion;
                        var stateClass = string.Empty;
                        if (isFixed)
                            stateClass = "grid-item-done";
                        else if (isNotFixed)
                            stateClass = "grid-item-notdone";

                        string dumpCountInfo = string.Empty;
                        if (item.DumpInfos.Count > 0)
                            dumpCountInfo = item.ApplicationName == "Unassigned" ? @item.DumpInfos.Count + " dump" + (@item.DumpInfos.Count == 1 ? "" : "s") : @item.DumpInfos.Count + " dump" + (@item.DumpInfos.Count == 1 ? "" : "s") + ", uploaded " + @item.DumpInfos.Max(dumpInfo => dumpInfo.UploadDate).AsTimeAgo();
                        <tr>
                            <!-- application name -->
                            <td class="@stateClass draggable" draggable="true" data-id="@item.DumpCallstackId">@Html.DisplayFor(modelItem => item.ApplicationName) <a href="/Home/Dump?callstackId=@item.DumpCallstackId" Style="float: right;" class="button-link">◎</a></td>
                            <!-- application version -->
                            <td class="@stateClass">@Html.DisplayFor(modelItem => item.ApplicationVersion)</td>
                            <!-- ticket -->
                            <td class="@stateClass">
                                @if (item.Ticket.Length > 0)
                                {
                                    <a href="@Constants.TicketBaseUrl@item.Ticket" target="_blank" class="ticket">@item.Ticket</a>
                                }
                                @if (item.ApplicationName != Constants.UnassignedDumpNames)
                                {
                                    <button type="button" Style="float: right;" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#setTicketModal" data-id="@item.DumpCallstackId">Set</button>
                                }
                            </td>
                            <!-- fixed version -->
                            <td class="@stateClass">
                                <table style="border: none; margin:0; padding:0;" >
                                    <tr style="background-color: transparent; margin:0; padding:0;">
                                        <td style="width: 100%; border: none; margin:0; padding:0;">
                                            @if (item.FixedVersion.Length > 0)
                                            {
                                                <p class="version">@Html.DisplayFor(modelItem => item.FixedVersion)</p>
                                            }
                                        </td>
                                        <td style="border: none;">
                                            @if (item.ApplicationName != Constants.UnassignedDumpNames)
                                            {
                                                <button type="button" style="float: right;" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#setFixedVersionModal" data-id="@item.DumpCallstackId">Set</button>
                                            }
                                        </td>
                                    </tr>
                                </table>
                            </td>
                            <!-- exception type and comment -->
                            <td class="@stateClass" style="max-width: 300px; white-space: normal; word-break: break-word;">
                                @Html.DisplayFor(modelItem => item.ExceptionType)
                                <button type="button" style="float: right;" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#setCommentModal" data-id="@item.DumpCallstackId" title="add comment">🗨</button>
                                @if (item.Comment.Length > 0)
                                {
                                    <div style="display: flex; flex-direction: column;">
                                        <hr />
                                        <p class="comment" style="max-width: 300px; white-space: normal; word-break: break-word;">@item.Comment</p>
                                    </div>
                                }
                            </td>

                            <!-- dump list -->
                            <td class="collapsed @stateClass">
                                @if (item.DumpInfos.Count > 0)
                                {
                                    <p data-bs-toggle="tooltip" title="@item.DumpInfos.Max(dumpInfo => dumpInfo.UploadDate)">@dumpCountInfo</p>
                                    <span>
                                        @{
                                            var del = 0;
                                            foreach (var dumpInfo in item.DumpInfos)
                                            {
                                                if (dumpInfo.FilePath.Length > 0)
                                                {
                                                    <p data-bs-toggle="tooltip" title="@dumpInfo.DumpTime"><a href="/Api/DownloadFile/@dumpInfo.DumpFileInfoId">dump @dumpInfo.ApplicationVersion (@SizeFormatter.SizeSuffix(dumpInfo.FileSize))</a> Dump from @dumpInfo.DumpTime.AsTimeAgo()<button type="button" class="btn btn-primary" onclick="deleteDump(@item.DumpCallstackId, @dumpInfo.DumpFileInfoId)" title="delete dump file">❌</button></p>
                                                }
                                                else
                                                    ++del;
                                            }
                                            if (del > 0)
                                            {
                                                <p>@del dump files deleted</p>
                                            }
                                        }
                                    </span>
                                }
                            </td>

                            <!-- call stack -->
                            <td class="collapsible collapsed callstack @stateClass">@Html.DisplayFor(modelItem => item.Callstack)</td>
                            <!-- delete and ungroup buttons -->
                            <td class="@stateClass">
                                <button type="button" class="btn btn-primary" onclick="deleteCallstack(@item.DumpCallstackId)" title="delete callstack">❌</button>
                                @if (item.Callstack.Contains("--------------"))
                                {
                                    <button type="button" class="btn btn-primary" onclick="unlinkCallstack(@item.DumpCallstackId)" title="ungroup callstacks">🔗</button>
                                }
                            </td>
                        </tr>
                    }
                }
            </table>


        </div>
    </div>
</div>
<partial name="_CallStackHelpers" />

<script type="text/javascript">
    function stopDefault(event) {
        event.preventDefault();
        event.stopPropagation();
    }
    function dragOver(label, text) {
        label.style.animationName = "dropbox";
        label.innerText = text;
    }
    function dragLeave(label) {
        label.style.animationName = "";
        label.innerText = "Click to choose dump files or drag-n-drop them here";
    }
    function addFilesAndSubmit(event) {
        var files = event.target.files || event.dataTransfer.files;
        var field = document.getElementById("files-field");
        field.files = files;
        submitFilesForm(field.form);
    }
    function submitFilesForm(form) {
        var label = document.getElementById("files-label");
        dragOver(label, "Uploading dump files..."); // set the drop zone text and styling
        if (!FormData) {
            alert("Function not supported by this browser.")
            return false;
        }
        var fd = new FormData();
        //fd.append(form.elements[0].name, form.elements[0].value); // must append the AntiForgeryToken to the form data
        for (var i = 0; i < form.files.files.length; i++) {
            var field = form.files;
            fd.append(field.name, field.files[i], field.files[i].name);
        }
        var progress = document.getElementById("files-progress");
        var x = new XMLHttpRequest();
        if (x.upload) {
            x.upload.addEventListener("progress", function (event) {
                var percentage = Math.round(event.loaded / event.total * 100);
                progress.innerText = progress.style.width = percentage + "%";
            });
        }
        x.onreadystatechange = function () {
            if (x.readyState == 4) {
                progress.innerText = progress.style.width = "";
                form.files.value = "";
                dragLeave(label); // this will reset the text and styling of the drop zone
                if (x.status == 201) {
                    location.reload();
                }
                else if (x.status == 500) {
                    alert(x.responseText); // do something with the server error
                }
                else {
                    alert(x.status + ": " + x.statusText + x.responseText + x);
                }
            }
        };
        x.open(form.method, form.action, true);
        x.send(fd);
        return false; // do not forget this
    }
</script>
